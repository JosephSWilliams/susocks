susocks:
  the stupid unix socks suite for super users
  much like yourself.

contact:
  complain to /relayhell/d3v11 on irc.d3v11.ano
  or irc.icann.bz in #anonet.

depends:
  daemontools, ucspi-tcp, python(<=2.6), sh

recommends:
  cython

install:
  ./Make.sh
  useradd susocks
  ./bin/add-susocks5-listen susocks 127.0.0.1 9005
  ./bin/add-susocks4a-listen susocks 127.0.0.1 9004
  $editor /services/susocks5-127.0.0.1-9005/conf/ALLOW
  $editor /services/susocks5-127.0.0.1-9005/conf/REJECT
  $editor /services/susocks4a-127.0.0.1-9004/conf/ALLOW
  $editor /services/susocks4a-127.0.0.1-9004/conf/REJECT

conf/ALLOW,REJECT:
  susocks interfaces directly with python's re module.
  incase you don't understand python regexp and you're
  too stupid to find the manpage on your own i've taken
  then liberty of copy && pasting it for you. each line
  in conf/ALLOW and conf/REJECT will be compiled at
  runtime using the syntax below. happy hacking! :-)

    The special characters are:
        "."      Matches any character except a newline.
        "^"      Matches the start of the string.
        "$"      Matches the end of the string or just before the newline at
                 the end of the string.
        "*"      Matches 0 or more (greedy) repetitions of the preceding RE.
                 Greedy means that it will match as many repetitions as possible.
        "+"      Matches 1 or more (greedy) repetitions of the preceding RE.
        "?"      Matches 0 or 1 (greedy) of the preceding RE.
        *?,+?,?? Non-greedy versions of the previous three special characters.
        {m,n}    Matches from m to n repetitions of the preceding RE.
        {m,n}?   Non-greedy version of the above.
        "\\"     Either escapes special characters or signals a special sequence.
        []       Indicates a set of characters.
                 A "^" as the first character indicates a complementing set.
        "|"      A|B, creates an RE that will match either A or B.
        (...)    Matches the RE inside the parentheses.
                 The contents can be retrieved or matched later in the string.
        (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
        (?:...)  Non-grouping version of regular parentheses.
        (?P<name>...) The substring matched by the group is accessible by name.
        (?P=name)     Matches the text matched earlier by the group named name.
        (?#...)  A comment; ignored.
        (?=...)  Matches if ... matches next, but doesn't consume the string.
        (?!...)  Matches if ... doesn't match next.
        (?<=...) Matches if preceded by ... (must be fixed length).
        (?<!...) Matches if not preceded by ... (must be fixed length).
        (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                           the (optional) no pattern otherwise.
    
    The special sequences consist of "\\" and a character from the list
    below.  If the ordinary character is not on the list, then the
    resulting RE will match the second character.
        \number  Matches the contents of the group of the same number.
        \A       Matches only at the start of the string.
        \Z       Matches only at the end of the string.
        \b       Matches the empty string, but only at the start or end of a word.
        \B       Matches the empty string, but not at the start or end of a word.
        \d       Matches any decimal digit; equivalent to the set [0-9].
        \D       Matches any non-digit character; equivalent to the set [^0-9].
        \s       Matches any whitespace character; equivalent to [ \t\n\r\f\v].
        \S       Matches any non-whitespace character; equiv. to [^ \t\n\r\f\v].
        \w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
                 With LOCALE, it will match the set [0-9_] plus characters defined
                 as letters for the current locale.
        \W       Matches the complement of \w.
        \\       Matches a literal backslash.
